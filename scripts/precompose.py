"""
Create precomposed versions of glyphs with combining diacritics where possible.
"""

import ufoLib2
from ufoLib2.objects.glyph import Glyph
from ufoLib2.objects.component import Component
from fontTools.misc.transform import Identity

from glyphsLib.glyphdata import GlyphData
from importlib.resources import files

from pathlib import Path

import unicodedata as ud

AUTOGEN_NOTE = "Generated by precompose.py\nIf this note is removed or altered then future runs will not update this, even if anchor positions have changed."


def getGlyphData() -> GlyphData:
    path = files("glyphsLib.data") / "GlyphData.xml"
    with path.open("rb") as f:
        return GlyphData.from_files(f)


gd = getGlyphData()
u2n = {int(k, 16): v["name"].replace('-', '.') for k, v in gd.unicodes.items()}

src_dir = Path(Path(__file__).resolve().parent, "../src/").resolve()
regular = ufoLib2.Font.open(
    (src_dir / "AnnotationMono_Regular.ufo").resolve(), lazy=True
)
reg_unis = {chr(u): g.name or f"uni{u:X}" for g in regular for u in g.unicodes}

for ufo in src_dir.glob("*.ufo"):
    font = ufoLib2.Font.open(ufo.resolve(), lazy=True)

    unis = {chr(u): g.name or f"uni{u:X}" for g in font for u in g.unicodes}

    # Iterate through the basic multilingual plane and figure out
    # which characters we have the base glyphs to precompose.
    for i in range(65536):
        if (chr(i) in unis and font[unis[chr(i)]].note != AUTOGEN_NOTE) or (
            chr(i) in reg_unis and regular[reg_unis[chr(i)]].note != AUTOGEN_NOTE
        ):
            continue

        seq = ud.normalize("NFD", chr(i))

        if len(seq) < 2:
            continue
        if all([c in unis for c in seq]):
            name = u2n[i] if i in u2n else f"uni{i:X}"
            print(f"{chr(i)} -> {seq} (U+{i:X}, {name})")

            components = [Component(unis[seq[0]])]

            for c in seq[1:]:
                comb = font[unis[c]]

                matches = []
                for cmp in components[::-1]:
                    o = font[cmp.baseGlyph]
                    for a in o.anchors:
                        for ca in comb.anchors:
                            if ca.name == f"_{a.name}":
                                matches.append(
                                    (
                                        a.x + cmp.transformation.dx - ca.x,
                                        a.y + cmp.transformation.dy - ca.y,
                                    )
                                )

                t = Identity

                if len(matches) > 0:
                    dx, dy = matches[0]
                    t = t.translate(dx, dy)
                else:
                    t = t.translate(font[components[-1].baseGlyph].width, 0)

                components.append(Component(unis[c], t))

            if name in font and font[name].note == AUTOGEN_NOTE:
                del font[name]

            font.addGlyph(
                Glyph(
                    name,
                    width=font[components[0].baseGlyph].width,
                    height=font[components[0].baseGlyph].height,
                    unicodes=[i],
                    components=components,
                    note=AUTOGEN_NOTE,
                )
            )

    font.save()
